// HybridService.js - Service for managing hybrid species
// This file should go in your 'data' folder since it deals with specimen data

import { baseSpecimens } from './specimens';

/**
 * Service for managing hybrid species generation and integration with the game
 */
const HybridService = {
  // Known hybrid combinations
  hybridConfigs: [
    {
      id: 'hybrid_tortoise',
      parents: ['eastern_santa_cruz_tortoise', 'floreana_giant_tortoise'],
      name: 'Floreana-Santa Cruz Hybrid Tortoise',
      latin: 'Chelonoidis niger × donfaustoi',
      rarity: 'very rare',
      scientificValue: 6,
      // Specific spawn locations for this hybrid
      spawnLocations: [
        { x: 1, y: 2 }, // Central Highland
        { x: 2, y: 2 }  // Settlement
      ]
    },
    {
      id: 'hybrid_mockingbird',
      parents: ['galapagos_mockingbird', 'floreana_mockingbird'],
      name: 'Island Hybrid Mockingbird',
      latin: 'Mimus parvulus × trifasciatus',
      rarity: 'rare',
      scientificValue: 5,
      // Specific spawn locations for this hybrid
      spawnLocations: [
        { x: 2, y: 1 }, // Northern Highlands
        { x: 3, y: 1 }  // Eastern Cliffs
      ]
    },
    {
      id: 'hybrid_finch',
      parents: ['large_ground_finch', 'medium_ground_finch'],
      name: 'Intermediate Ground Finch',
      latin: 'Geospiza fortis × magnirostris',
      rarity: 'uncommon',
      scientificValue: 5,
      // Specific spawn locations for this hybrid
      spawnLocations: [
        { x: 1, y: 3 }, // Southern Mangroves
        { x: 2, y: 3 }, // Basalt Plains
        { x: 2, y: 1 }  // Northern Highlands
      ]
    }
  ],
  
  // Cache for generated hybrids
  _hybrids: null,
  
  /**
   * Initialize all possible hybrid species
   */
  initializeHybrids() {
    if (this._hybrids) return this._hybrids;
    
    this._hybrids = this.hybridConfigs.map(config => {
      const parentA = baseSpecimens.find(s => s.id === config.parents[0]);
      const parentB = baseSpecimens.find(s => s.id === config.parents[1]);
      
      if (!parentA || !parentB) {
        console.error(`Could not find parent species for hybrid ${config.id}`);
        return null;
      }
      
      return this.generateHybrid(parentA, parentB, config);
    }).filter(hybrid => hybrid !== null);
    
    return this._hybrids;
  },
  
  /**
   * Get all possible hybrid species
   */
  getHybrids() {
    return this.initializeHybrids();
  },
  
  /**
   * Generate a hybrid species from two parent species
   */
  generateHybrid(parentA, parentB, config) {
    // Generate hybrid description
    const description = this.createHybridDescription(parentA, parentB);
    
    // Merge details from both parents
    const details = this.mergeParentDetails(parentA, parentB);
    
    // Determine habitat by combining parent habitats
    const habitat = `${parentA.habitat.split(' ')[0]} and ${parentB.habitat.split(' ')[0]} regions where the parent species ranges overlap`;
    
    // Combine keywords and add new ones
    const keywords = [...new Set([
      ...parentA.keywords,
      ...parentB.keywords,
      'hybrid',
      'intermediate',
      'crossbreed'
    ])];
    
    // Generate memory text
    const memoryText = this.createHybridMemoryText(parentA, parentB);
    
    // Return the complete hybrid object
    return {
      id: config.id,
      name: config.name,
      latin: config.latin,
      description,
      details,
      habitat,
      parentSpecies: [parentA.id, parentB.id],
      hybridGeneration: 1,
      collected: false,
      observations: [],
      scientificValue: config.scientificValue || 5,
      image: `/specimens/generated/${config.id}.jpg`, // This would be generated by DALLE
      spawnLocations: config.spawnLocations || [],
      rarity: config.rarity || 'rare',
      keywords,
      memoryText
    };
  },
  
  /**
   * Create a description for the hybrid by blending parent species traits
   */
  createHybridDescription(parentA, parentB) {
    if (parentA.id.includes('tortoise') && parentB.id.includes('tortoise')) {
      return `A remarkable specimen showing characteristics of both island varieties. The shell has a shape intermediate between the domed form of Santa Cruz tortoises and the saddleback morphology of Floreana specimens. Its neck length and leg proportions likewise fall between those of its parent forms.`;
    }
    
    if (parentA.id.includes('mockingbird') && parentB.id.includes('mockingbird')) {
      return `An unusual mockingbird with plumage patterns that suggest a blend between the Galápagos and Floreana varieties. Its behavior seems intermediate - neither as bold as the Floreana species nor as docile as its mainland counterpart, with territorial calls that combine elements of both parental forms.`;
    }
    
    if (parentA.id.includes('finch') && parentB.id.includes('finch')) {
      return `A finch with a beak size intermediate between the large and medium ground finches. It appears capable of processing a wider variety of seeds than either parent species, suggesting a unique ecological niche. The plumage shows subtle blending of parental characteristics, particularly in the wing coverts.`;
    }
    
    // Generic hybrid description as fallback
    return `A curious specimen showing characteristics of both ${parentA.name} and ${parentB.name}, suggesting potential hybridization between these distinct forms.`;
  },
  
  /**
   * Merge details from parent species into a coherent set for the hybrid
   */
  mergeParentDetails(parentA, parentB) {
    if (parentA.id.includes('tortoise') && parentB.id.includes('tortoise')) {
      return [
        `Shell shape intermediate between domed and saddleback varieties, with moderate elevation at the front`,
        `Neck length allows for browsing at various heights, combining adaptations of both parent species`,
        `Coloration of the shell combines elements of both parent species with unique mottling`,
        `Leg proportions intermediate, suggesting adaptation to varied terrain`,
        `Found only in areas where both parent species territories overlap, particularly in transitional habitat zones`
      ];
    }
    
    if (parentA.id.includes('mockingbird') && parentB.id.includes('mockingbird')) {
      return [
        `Plumage shows a blend of patterns, with the pale eye markings of Floreana mockingbirds but less pronounced`,
        `Territorial behavior intermediate between the aggressive Floreana species and the more docile Galápagos variety`,
        `Vocalizations combine elements from both parent species, with distinct hybrid calls`,
        `Feeding behavior shows flexibility in approach, neither as bold nor as cautious as either parent species`,
        `Only observed where the ranges of both parent species meet, suggesting recent hybridization`
      ];
    }
    
    if (parentA.id.includes('finch') && parentB.id.includes('finch')) {
      return [
        `Beak size precisely intermediate between the large and medium ground finch varieties`,
        `Capable of processing both tough seeds (like the large ground finch) and smaller varied seeds (like the medium ground finch)`,
        `Plumage shows subtle blending of parental characteristics, particularly in the wing coverts`,
        `Territorial song combines elements from both parent species in a distinctive pattern`,
        `Observed feeding on an intermediate range of seed sizes, possibly occupying a unique ecological niche`
      ];
    }
    
    // Generic hybrid details as fallback
    return [
      `Shows intermediate traits between ${parentA.name} and ${parentB.name}`,
      `${this.extractFirstDetail(parentA)}, yet also ${this.extractFirstDetail(parentB).toLowerCase()}`,
      `Behavior appears to blend characteristics of both parent species`,
      `Found only where the ranges of parent species overlap, suggesting recent hybridization`,
      `Presents fascinating intermediate adaptations that raise questions about species boundaries`
    ];
  },
  
  /**
   * Extract the first detail from a specimen to use in hybrid description
   */
  extractFirstDetail(specimen) {
    if (specimen.details && specimen.details.length > 0) {
      // Remove any leading conjunctions for cleaner integration
      return specimen.details[0].replace(/^(And|But|Yet|However|Although)\s+/i, '');
    }
    return `Characteristics of ${specimen.name}`;
  },
  
  /**
   * Create memory text reflecting Darwin's thoughts on the hybrid
   */
  createHybridMemoryText(parentA, parentB) {
    if (parentA.id.includes('tortoise') && parentB.id.includes('tortoise')) {
      return `Most curious! This tortoise appears intermediate between the domed variety of Santa Cruz and the saddleback form of Floreana. Could it be that these creatures, though distinct in form, are somehow capable of producing offspring together? The very notion challenges our understanding of species as fixed entities. I shall have to document this most carefully for further study.`;
    }
    
    if (parentA.id.includes('mockingbird') && parentB.id.includes('mockingbird')) {
      return `I find myself perplexed by this mockingbird specimen. It bears traits of both island varieties, suggesting that perhaps these birds, despite their differences, remain capable of interbreeding. If isolation breeds distinction, what then happens when these distinct forms meet once more? The implications are profound.`;
    }
    
    if (parentA.id.includes('finch') && parentB.id.includes('finch')) {
      return `This finch's beak is most remarkable—neither as large as the large ground finch nor as modest as the medium variety. It suggests an intermingling of these forms, which raises questions about the fixity of species. Could environmental pressures favor different beak sizes, and might intermediate forms arise where these varieties coexist? I must consider this carefully.`;
    }
    
    // Generic hybrid memory as fallback
    return `A most peculiar specimen that appears to share characteristics of both ${parentA.name} and ${parentB.name}. Could these distinct forms somehow produce viable offspring? The notion challenges our understanding of species as immutable entities.`;
  },
  
  /**
   * Check if all parent species have been collected before spawning hybrid
   */
  checkHybridSpawnConditions(hybrid, collectedSpecimens) {
    // Get parent species IDs
    const parentIds = hybrid.parentSpecies;
    
    // Check if all parents have been collected
    const allParentsCollected = parentIds.every(parentId => 
      collectedSpecimens.some(specimen => specimen.id === parentId)
    );
    
    // Check if parents have observations
    const parentObservations = parentIds.every(parentId => {
      const parent = collectedSpecimens.find(s => s.id === parentId);
      return parent && parent.observations && parent.observations.length >= 2;
    });
    
    return allParentsCollected && parentObservations;
  },
  
  /**
   * Get hybrids that should be spawned based on current game state
   */
  getSpawnableHybrids(playerPosition, collectedSpecimens) {
    // Initialize hybrids if not already done
    const hybrids = this.initializeHybrids();
    
    return hybrids.filter(hybrid => {
      // Check if parents have been collected and observed
      const canSpawn = this.checkHybridSpawnConditions(hybrid, collectedSpecimens);
      
      // Check if player is in a spawn location
      const inSpawnLocation = hybrid.spawnLocations.some(location => 
        location.x === playerPosition.x && location.y === playerPosition.y
      );
      
      // Apply rarity-based random chance
      let spawnChance = 0.1; // Default 10% chance
      
      switch(hybrid.rarity) {
        case 'very rare':
          spawnChance = 0.05; // 5% chance
          break;
        case 'rare':
          spawnChance = 0.1; // 10% chance
          break;
        case 'uncommon':
          spawnChance = 0.2; // 20% chance
          break;
        default:
          spawnChance = 0.1;
      }
      
      const randomChance = Math.random() < spawnChance;
      
      return canSpawn && inSpawnLocation && randomChance;
    });
  },
  
  /**
   * Build a prompt for DALLE image generation
   */
  buildImageGenerationPrompt(hybrid) {
    if (hybrid.id === 'hybrid_tortoise') {
      return `A scientifically accurate illustration in 19th century naturalist style of a hybrid Galapagos tortoise, showing features of both domed and saddleback varieties. The shell has an intermediate shape between domed and raised at the front. The specimen is shown in profile against sparse Galapagos scrubland.`;
    } 
    
    if (hybrid.id === 'hybrid_mockingbird') {
      return `A scientifically accurate illustration in 19th century naturalist style of a hybrid Galapagos mockingbird. The bird has intermediate plumage between the Galapagos and Floreana species, with subtle markings. Shown perched on a cactus branch against a simple background.`;
    } 
    
    if (hybrid.id === 'hybrid_finch') {
      return `A scientifically accurate illustration in 19th century naturalist style of a hybrid Galapagos finch. The bird has a beak size intermediate between large and medium ground finches. Shown in profile with detailed feather texture, perched on a small branch.`;
    }
    
    // Generic prompt for any other hybrid
    return `A scientifically accurate illustration in 19th century naturalist style of a hybrid Galapagos specimen named ${hybrid.name}. The illustration shows a blend of features from its parent species, with naturalistic details and textures. Drawn in the style of John Gould or other Darwin-era scientific illustrators.`;
  },
  
  /**
   * Generate DALLE image for a hybrid - to be implemented with actual API call
   */
  async generateHybridImage(hybrid) {
    // In a real implementation, this would call the DALLE API
    const prompt = this.buildImageGenerationPrompt(hybrid);
    console.log(`Would generate image with prompt: ${prompt}`);
    
    // Here you would make the actual API call to DALLE
    // For example:
    /*
    const response = await fetch('/api/generate-image', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prompt })
    });
    
    if (!response.ok) {
      throw new Error('Failed to generate image');
    }
    
    const data = await response.json();
    return data.imageUrl;
    */
    
    // For now, just return a placeholder path
    return `/specimens/generated/${hybrid.id}.jpg`;
  },
  
  /**
   * Add spawnable hybrids to the specimen list
   */
  addHybridsToSpecimensList(specimenList) {
    const hybrids = this.getHybrids();
    
    // Make a copy of the specimen list
    const updatedList = [...specimenList];
    
    // Add hybrids that aren't already in the list
    hybrids.forEach(hybrid => {
      if (!updatedList.some(specimen => specimen.id === hybrid.id)) {
        updatedList.push(hybrid);
      }
    });
    
    return updatedList;
  },
  
  /**
   * Integration with the GameContainer - add to game state
   */
  integrateWithGameState(gameState, updateGameState) {
    const { playerPosition, collectedSpecimens, specimenList } = gameState;
    
    // Get hybrids that can spawn at the current location
    const spawnableHybrids = this.getSpawnableHybrids(playerPosition, collectedSpecimens);
    
    if (spawnableHybrids.length > 0) {
      // Add hybrids to the specimen list if not already there
      const updatedSpecimens = this.addHybridsToSpecimensList(specimenList);
      
      // Add hybrids to nearby specimens
      const nearbySpecimenIds = gameState.nearbySpecimenIds || [];
      const updatedNearbyIds = [...nearbySpecimenIds];
      
      spawnableHybrids.forEach(hybrid => {
        if (!updatedNearbyIds.includes(hybrid.id)) {
          updatedNearbyIds.push(hybrid.id);
        }
      });
      
      // Update game state
      updateGameState({
        specimenList: updatedSpecimens,
        nearbySpecimenIds: updatedNearbyIds
      });
      
      // Return the spawned hybrids for potential narrative generation
      return spawnableHybrids;
    }
    
    return [];
  },
  
  /**
   * Send a notification about hybrid discovery to the LLM
   */
  generateHybridDiscoveryNarrative(hybrid) {
    if (hybrid.id === 'hybrid_tortoise') {
      return `You notice a most peculiar tortoise in the clearing ahead. Its shell shape appears to be intermediate between the domed form you observed on Santa Cruz and the saddleback variety from Floreana. Could this represent some form of interbreeding between these distinct varieties? The implications could be profound for your understanding of species boundaries.`;
    }
    
    if (hybrid.id === 'hybrid_mockingbird') {
      return `A curious mockingbird alights on a nearby branch, displaying plumage that seems to combine characteristics of both the Galápagos and Floreana varieties. Its behavior, too, appears intermediate—neither as bold as the Floreana birds nor as cautious as those from other islands. This suggests an intriguing possibility of interbreeding between these distinct forms.`;
    }
    
    if (hybrid.id === 'hybrid_finch') {
      return `You spot a finch with a most remarkable beak—neither as robust as that of the large ground finch nor as modest as the medium variety. It appears to represent an intermediate form, capable perhaps of exploiting food sources unavailable to either parent species. The existence of such a hybrid raises fascinating questions about the nature of species themselves.`;
    }
    
    // Generic discovery narrative
    return `You notice a most curious specimen that appears to combine characteristics of different varieties you've observed on the islands. Its intermediate form suggests the possibility of hybridization between what you had considered distinct species—a notion that challenges prevailing views on the fixity of species in nature.`;
  }
};

export default HybridService;