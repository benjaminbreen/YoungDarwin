'use client';

import React, { useState, useEffect } from 'react';
import { baseSpecimens } from './specimens';

/**
 * HybridSpeciesGenerator Component
 * 
 * This component manages the generation of hybrid species by combining
 * traits from existing parent species. It focuses on three main species groups:
 * tortoises, mockingbirds, and finches.
 */
export default function HybridSpeciesGenerator() {
  const [hybrids, setHybrids] = useState([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationStatus, setGenerationStatus] = useState('');
  
  // Potential parent species are organized by their taxonomic groups
  const taxonomicGroups = {
    tortoises: ['eastern_santa_cruz_tortoise', 'floreana_giant_tortoise'],
    mockingbirds: ['galapagos_mockingbird', 'floreana_mockingbird'],
    finches: ['large_ground_finch', 'medium_ground_finch']
  };
  
  // Hybrid generation config
  const hybridConfig = [
    {
      id: 'hybrid_tortoise',
      parents: taxonomicGroups.tortoises,
      name: 'Floreana-Santa Cruz Hybrid Tortoise',
      latin: 'Chelonoidis niger × donfaustoi',
      rarity: 'very rare',
      scientificValue: 6
    },
    {
      id: 'hybrid_mockingbird',
      parents: taxonomicGroups.mockingbirds,
      name: 'Island Hybrid Mockingbird',
      latin: 'Mimus parvulus × trifasciatus',
      rarity: 'rare',
      scientificValue: 5
    },
    {
      id: 'hybrid_finch',
      parents: taxonomicGroups.finches,
      name: 'Intermediate Ground Finch',
      latin: 'Geospiza fortis × magnirostris',
      rarity: 'uncommon',
      scientificValue: 5
    }
  ];
  
  /**
   * Initialize hybrids when component mounts
   */
  useEffect(() => {
    initializeHybrids();
  }, []);
  
  /**
   * Create initial hybrid species
   */
  const initializeHybrids = () => {
    const initialHybrids = hybridConfig.map(config => {
      const parentA = baseSpecimens.find(s => s.id === config.parents[0]);
      const parentB = baseSpecimens.find(s => s.id === config.parents[1]);
      
      if (!parentA || !parentB) {
        console.error(`Could not find parent species for hybrid ${config.id}`);
        return null;
      }
      
      return generateHybrid(parentA, parentB, config);
    }).filter(hybrid => hybrid !== null);
    
    setHybrids(initialHybrids);
  };
  
  /**
   * Generate a hybrid species from two parent species
   */
  const generateHybrid = (parentA, parentB, config) => {
    // Generate hybrid description
    const description = createHybridDescription(parentA, parentB);
    
    // Merge details from both parents
    const details = mergeParentDetails(parentA, parentB);
    
    // Determine habitat by combining parent habitats
    const habitat = `${parentA.habitat.split(' ')[0]} and ${parentB.habitat.split(' ')[0]} regions where the parent species ranges overlap`;
    
    // Combine keywords and add new ones
    const keywords = [...new Set([
      ...parentA.keywords,
      ...parentB.keywords,
      'hybrid',
      'intermediate',
      'crossbreed'
    ])];
    
    // Generate memory text
    const memoryText = createHybridMemoryText(parentA, parentB);
    
    // Determine spawn locations
    const spawnLocations = generateSpawnLocations();
    
    // Return the complete hybrid object
    return {
      id: config.id,
      name: config.name,
      latin: config.latin,
      description,
      details,
      habitat,
      parentSpecies: [parentA.id, parentB.id],
      hybridGeneration: 1,
      collected: false,
      observations: [],
      scientificValue: config.scientificValue || 5,
      image: `/specimens/generated/${config.id}.jpg`, // This will be generated by DALLE
      spawnLocations,
      rarity: config.rarity || 'rare',
      keywords,
      memoryText
    };
  };
  
  /**
   * Create a description for the hybrid by blending parent species traits
   */
  const createHybridDescription = (parentA, parentB) => {
    // Extract key descriptive elements from parent descriptions
    const parentADesc = parentA.description.toLowerCase();
    const parentBDesc = parentB.description.toLowerCase();
    
    if (parentA.id.includes('tortoise') && parentB.id.includes('tortoise')) {
      return `A remarkable specimen showing characteristics of both island varieties. The shell has a shape intermediate between the domed form of Santa Cruz tortoises and the saddleback morphology of Floreana specimens.`;
    }
    
    if (parentA.id.includes('mockingbird') && parentB.id.includes('mockingbird')) {
      return `An unusual mockingbird with plumage patterns that suggest a blend between the Galápagos and Floreana varieties. Its behavior seems intermediate - neither as bold as the Floreana species nor as docile as its mainland counterpart.`;
    }
    
    if (parentA.id.includes('finch') && parentB.id.includes('finch')) {
      return `A finch with a beak size intermediate between the large and medium ground finches. It appears capable of processing a wider variety of seeds than either parent species, suggesting a unique ecological niche.`;
    }
    
    // Generic hybrid description as fallback
    return `A curious specimen showing characteristics of both ${parentA.name} and ${parentB.name}, suggesting potential hybridization between these distinct forms.`;
  };
  
  /**
   * Merge details from parent species into a coherent set for the hybrid
   */
  const mergeParentDetails = (parentA, parentB) => {
    // Create hybrid details that blend characteristics from both parents
    const hybridDetails = [
      `Shows intermediate traits between ${parentA.name} and ${parentB.name}`,
      `${extractFirstDetail(parentA)}, yet also ${extractFirstDetail(parentB).toLowerCase()}`,
      `Behavior appears to blend characteristics of both parent species`,
      `Found only where the ranges of parent species overlap, suggesting recent hybridization`,
      `Presents fascinating intermediate adaptations that raise questions about species boundaries`
    ];
    
    return hybridDetails;
  };
  
  /**
   * Extract the first detail from a specimen to use in hybrid description
   */
  const extractFirstDetail = (specimen) => {
    if (specimen.details && specimen.details.length > 0) {
      // Remove any leading conjunctions for cleaner integration
      return specimen.details[0].replace(/^(And|But|Yet|However|Although)\s+/i, '');
    }
    return `Characteristics of ${specimen.name}`;
  };
  
  /**
   * Create memory text reflecting Darwin's thoughts on the hybrid
   */
  const createHybridMemoryText = (parentA, parentB) => {
    if (parentA.id.includes('tortoise') && parentB.id.includes('tortoise')) {
      return `Most curious! This tortoise appears intermediate between the domed variety of Santa Cruz and the saddleback form of Floreana. Could it be that these creatures, though distinct in form, are somehow capable of producing offspring together? The very notion challenges our understanding of species as fixed entities. I shall have to document this most carefully for further study.`;
    }
    
    if (parentA.id.includes('mockingbird') && parentB.id.includes('mockingbird')) {
      return `I find myself perplexed by this mockingbird specimen. It bears traits of both island varieties, suggesting that perhaps these birds, despite their differences, remain capable of interbreeding. If isolation breeds distinction, what then happens when these distinct forms meet once more? The implications are profound.`;
    }
    
    if (parentA.id.includes('finch') && parentB.id.includes('finch')) {
      return `This finch's beak is most remarkable—neither as large as the large ground finch nor as modest as the medium variety. It suggests an intermingling of these forms, which raises questions about the fixity of species. Could environmental pressures favor different beak sizes, and might intermediate forms arise where these varieties coexist? I must consider this carefully.`;
    }
    
    // Generic hybrid memory as fallback
    return `A most peculiar specimen that appears to share characteristics of both ${parentA.name} and ${parentB.name}. Could these distinct forms somehow produce viable offspring? The notion challenges our understanding of species as immutable entities.`;
  };
  
  /**
   * Generate spawn locations for hybrid species
   */
  const generateSpawnLocations = () => {
    // Generate 2-3 random locations where the hybrid might be found
    const locations = [];
    const numLocations = Math.floor(Math.random() * 2) + 2; // 2-3 locations
    
    for (let i = 0; i < numLocations; i++) {
      // Generate location on the island
      const location = {
        x: Math.floor(Math.random() * 5), // 0-4 (grid coordinates)
        y: Math.floor(Math.random() * 5)  // 0-4 (grid coordinates)
      };
      
      // Add to locations if not already present
      if (!locations.some(loc => loc.x === location.x && loc.y === location.y)) {
        locations.push(location);
      }
    }
    
    return locations;
  };
  
  /**
   * Generate hybrid species image using DALLE API
   */
  const generateHybridImage = async (hybrid) => {
    setIsGenerating(true);
    setGenerationStatus(`Generating image for ${hybrid.name}...`);
    
    try {
      // Construct a prompt for DALLE
      let prompt = '';
      
      if (hybrid.id === 'hybrid_tortoise') {
        prompt = `A scientifically accurate illustration in 19th century naturalist style of a hybrid Galapagos tortoise, showing features of both domed and saddleback varieties. The shell has an intermediate shape between domed and raised at the front. The specimen is shown in profile against sparse Galapagos scrubland.`;
      } else if (hybrid.id === 'hybrid_mockingbird') {
        prompt = `A scientifically accurate illustration in 19th century naturalist style of a hybrid Galapagos mockingbird. The bird has intermediate plumage between the Galapagos and Floreana species, with subtle markings. Shown perched on a cactus branch against a simple background.`;
      } else if (hybrid.id === 'hybrid_finch') {
        prompt = `A scientifically accurate illustration in 19th century naturalist style of a hybrid Galapagos finch. The bird has a beak size intermediate between large and medium ground finches. Shown in profile with detailed feather texture, perched on a small branch.`;
      }
      
      // In a real implementation, we would call the DALLE API here
      // For now, we'll just simulate a successful response
      console.log(`Would generate image with prompt: ${prompt}`);
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Update status
      setGenerationStatus(`Successfully generated image for ${hybrid.name}`);
      
      // In a real implementation, we would save the image and update the hybrid's image path
      // For now, we'll just return the hybrid unchanged
      return hybrid;
    } catch (error) {
      console.error('Error generating hybrid image:', error);
      setGenerationStatus(`Error generating image: ${error.message}`);
      return hybrid;
    } finally {
      setIsGenerating(false);
    }
  };
  
  /**
   * Check if all parent species have been collected before spawning hybrid
   */
  const checkHybridSpawnConditions = (hybrid, collectedSpecimens) => {
    // Get parent species IDs
    const parentIds = hybrid.parentSpecies;
    
    // Check if all parents have been collected
    const allParentsCollected = parentIds.every(parentId => 
      collectedSpecimens.some(specimen => specimen.id === parentId)
    );
    
    // Additional conditions could be added here (location, time, etc.)
    
    return allParentsCollected;
  };
  
  /**
   * Get hybrids that should be spawned based on current game state
   */
  const getSpawnableHybrids = (playerPosition, collectedSpecimens) => {
    return hybrids.filter(hybrid => {
      // Check if parents have been collected
      const canSpawn = checkHybridSpawnConditions(hybrid, collectedSpecimens);
      
      // Check if player is in a spawn location
      const inSpawnLocation = hybrid.spawnLocations.some(location => 
        location.x === playerPosition.x && location.y === playerPosition.y
      );
      
      // Apply rarity-based random chance
      let spawnChance = 0.1; // Default 10% chance
      
      switch(hybrid.rarity) {
        case 'very rare':
          spawnChance = 0.05; // 5% chance
          break;
        case 'rare':
          spawnChance = 0.1; // 10% chance
          break;
        case 'uncommon':
          spawnChance = 0.2; // 20% chance
          break;
        default:
          spawnChance = 0.1;
      }
      
      const randomChance = Math.random() < spawnChance;
      
      return canSpawn && inSpawnLocation && randomChance;
    });
  };
  
  /**
   * Add spawnable hybrids to the game
   */
  const addHybridsToGame = (gameState, updateGameState) => {
    const { playerPosition, collectedSpecimens } = gameState;
    
    // Get hybrids that can spawn at the current location
    const spawnableHybrids = getSpawnableHybrids(playerPosition, collectedSpecimens);
    
    if (spawnableHybrids.length > 0) {
      // Add hybrids to nearby specimens
      updateGameState({
        nearbySpecimenIds: [...gameState.nearbySpecimenIds, ...spawnableHybrids.map(h => h.id)]
      });
      
      // Add hybrids to all specimens if not already there
      const updatedSpecimens = [...gameState.specimenList];
      
      spawnableHybrids.forEach(hybrid => {
        if (!updatedSpecimens.some(s => s.id === hybrid.id)) {
          updatedSpecimens.push(hybrid);
        }
      });
      
      updateGameState({
        specimenList: updatedSpecimens
      });
      
      return spawnableHybrids;
    }
    
    return [];
  };
  
  /**
   * Public API for the hybrid generator
   */
  return {
    hybrids,
    generateHybridImage,
    addHybridsToGame,
    getSpawnableHybrids
  };
}