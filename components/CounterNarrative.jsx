'use client';

import React, { useState, useEffect } from 'react';

// Utility function to clean narrative text of metadata markers
function cleanNarrativeText(text) {
  if (!text) return '';
  
  return text
    .replace(/\[MOOD:.*?\]/g, '')
    .replace(/\[FATIGUE:.*?\]/g, '')
    .replace(/\[SCIENTIFIC_INSIGHT:.*?\]/g, '')
    .replace(/\[COLLECTIBLE:.*?\]/g, '')
    .replace(/\[NPC:.*?\]/g, '')
    .replace(/NEXTSTEPS:[\s\S]*?(?=\[|$)/g, '')
    .trim();
}

export default function CounterNarrative({ onClose, rawResponse }) {
  const [critique, setCritique] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const fetchCritique = async () => {
      try {
        setIsLoading(true);
        
        console.log("Fetching historian critique with narrative:", 
          rawResponse ? rawResponse.substring(0, 100) + "..." : "No raw response available");
        
        // Get the narrative from cookies if not provided as prop
        let narrativeFromCookie = '';
        try {
          const cookieMatch = document.cookie.match(/lastNarrativeText=([^;]+)/);
          if (cookieMatch && cookieMatch[1]) {
            narrativeFromCookie = decodeURIComponent(cookieMatch[1]);
          }
        } catch (err) {
          console.warn("Error reading from cookie:", err);
        }
        
        // Clean the narrative text before sending
        const cleanedNarrative = cleanNarrativeText(rawResponse) || 
                               cleanNarrativeText(narrativeFromCookie) || 
                               'No narrative text available';
        
        // Send the raw response as part of the request
        const response = await fetch('/api/historian-critique', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            narrativeText: cleanedNarrative
          })
        });

        if (!response.ok) {
          throw new Error(`API returned status ${response.status}`);
        }

        const data = await response.json();
        const critiqueText = data.choices?.[0]?.message?.content || 
                           data.message?.content || 
                           'No critique generated.';
        
        setCritique(critiqueText);
      } catch (err) {
        console.error("Error fetching critique:", err);
        setError(`Failed to generate critique: ${err.message}`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchCritique();
  }, [rawResponse]);

  return (
    <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden flex flex-col">
        <div className="p-4 border-b border-gray-200 flex justify-between items-center bg-amber-50">
          <h3 className="font-bold text-lg flex items-center">
            <span className="text-xl mr-2">üßê</span>
            Historian's Critique
          </h3>
          <button 
            onClick={onClose}
            className="text-gray-500 hover:text-gray-800 text-2xl"
          >
            &times;
          </button>
        </div>
        
        <div className="flex-1 overflow-auto p-6">
          {isLoading ? (
            <div className="flex flex-col items-center justify-center h-full text-gray-500">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-amber-700 mb-4"></div>
              <p>The historian is reviewing the narrative...</p>
            </div>
          ) : error ? (
            <div className="text-red-600 p-4 rounded-lg bg-red-50">
              <h4 className="font-bold mb-2">Error</h4>
              <p>{error}</p>
            </div>
          ) : (
            <div className="prose max-w-none">
              <div className="p-4 bg-amber-50 rounded-lg mb-6 border-l-4 border-amber-500 text-sm italic">
                <p className="font-medium">Note:</p>
                <p>This critique is generated by an AI to help identify potential historical issues. It should be taken as a starting point for further research rather than definitive historical analysis.</p>
              </div>
              
              {/* Render the critique with appropriate formatting */}
              <div dangerouslySetInnerHTML={{ 
                __html: critique
                  .replace(/\n\n/g, '<br><br>')
                  .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                  .replace(/\*(.*?)\*/g, '<em>$1</em>')
                  .replace(/^# (.*?)$/gm, '<h2 class="text-xl font-bold mt-4 mb-2">$1</h2>')
                  .replace(/^## (.*?)$/gm, '<h3 class="text-lg font-bold mt-3 mb-2">$1</h3>')
              }} />
            </div>
          )}
        </div>
        
        <div className="p-4 border-t border-gray-200 bg-amber-50 flex justify-end">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-amber-600 hover:bg-amber-700 text-white rounded transition-colors"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}